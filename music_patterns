/*Collection of sound-reactive LED patterns that can be cycled through by pressing a button.
  All patterns are my own.

  Author: Morgan Cupp; Last Edited: 9/7/2021 */
  
#include <FastLED.h>

#define DATA_PIN     13
#define MIC_PIN      A3
#define BUTTON_PIN   1
#define NUM_LEDS     300
#define LED_TYPE     WS2812B
#define COLOR_ORDER  GRB
#define NUM_PATTERNS 5

const unsigned long SAMPLE_WINDOW_LENGTH = 50;
const unsigned int MINIMUM_VOLUME = 15;
const unsigned int MAXIMUM_VOLUME = 255;
const unsigned int MAXIMUM_BRIGHTNESS = 255;

CRGB leds[NUM_LEDS];
int button_state = 0;
int prev_button_state = 0;
int color = 0;
int pattern_id = 0;
unsigned int volume;


void setup() {
  delay(1000);
  FastLED.addLeds<LED_TYPE, DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS);
  pinMode(BUTTON_PIN, INPUT);
}

void loop() {
  color++;
  measure_volume();
  call_pattern();
  FastLED.show();  
  prev_button_state = button_state;
  button_state = digitalRead(BUTTON_PIN);
  if (button_was_pressed()) {
    advance_to_next_pattern();
  }
}

void measure_volume() {
  unsigned long sample_start_time = millis();
  unsigned int peak_to_peak = 0;
  unsigned int max_volume = 0;
  unsigned int min_volume = 1024;
  unsigned int sample;
 
  while (millis()-sample_start_time < SAMPLE_WINDOW_LENGTH) {
    sample = analogRead(MIC_PIN);
    if (sample < 1024) {
       if (sample > max_volume) {
          max_volume = sample;
       } else if (sample < min_volume) {
          min_volume = sample;
       }
    }
  }
  volume = max_volume - min_volume;
}

void call_pattern() {
  if (pattern_id == 0) {
    monochrome_bar();
  } else if (pattern_id == 1) {
    expanding_bar();
  } else if (pattern_id == 2) {
    four_expanding_bars();
  } else if (pattern_id == 3) {
    fixed_width_horizontal_bars();
  } else if (pattern_id == 4) {
    worm();
  }
}

bool button_was_pressed() {
  return prev_button_state == LOW and button_state == HIGH;
}

void advance_to_next_pattern() {
  pattern_id++;
  if (pattern_id == NUM_PATTERNS) {
    pattern_id = 0;
  }
}

void monochrome_bar() {
  int brightness = map_volume_to_brightness();
  for (int i = 0; i < NUM_LEDS; i++){
    leds[i] = CHSV(color, 255, brightness);
  }
}

int map_volume_to_brightness() {
  if (volume < MINIMUM_VOLUME) {
    return 5;
  } else if (volume < MAXIMUM_VOLUME) {
    return (volume*MAXIMUM_BRIGHTNESS)/MAXIMUM_VOLUME;
  } else {
    return MAXIMUM_BRIGHTNESS;
  }
}

void expanding_bar() {
  int width = map_volume_to_width();
  for (int i = NUM_LEDS/2-width; i < NUM_LEDS/2+width; i++) {
    leds[i] = CHSV(color, 255, 225);
  }
  fadeToBlackBy(leds, NUM_LEDS, 150);
}

int map_volume_to_width() {
  if (volume < MINIMUM_VOLUME) {
    return 5;
  } else if (volume < MAXIMUM_VOLUME) {
    return (volume*(NUM_LEDS/2))/MAXIMUM_VOLUME;
  } else {
    return NUM_LEDS/2;
  }
}

void four_expanding_bars() {
  int width_per_bar = map_volume_to_width()/4;
  for (int bar = 0; bar < 4; bar++) {
    int center = compute_center_of_bar(bar);
    for (int i = center-width_per_bar; i < center+width_per_bar; i++) {
      leds[i] = CHSV(color, 255, 225);
    }
  }
  fadeToBlackBy(leds, NUM_LEDS, 150);
}

int compute_center_of_bar(int bar_number) {
  return (NUM_LEDS/8)+(NUM_LEDS/4)*bar_number;
}

void fixed_width_horizontal_bars() {
  int segment = map_volume_to_segment();
  if (segment != -1) {
    light_up_segment(segment);
  }
  fadeToBlackBy(leds, NUM_LEDS, 150);
}

int map_volume_to_segment() {
  if (volume < MINIMUM_VOLUME) {
    return -1;
  } else if (volume < MAXIMUM_VOLUME/6) {
    return 0;
  } else if (volume < MAXIMUM_VOLUME/3) {
    return 1;
  } else if (volume < MAXIMUM_VOLUME/2) {
    return 2;
  } else if (volume < 2*MAXIMUM_VOLUME/3) {
    return 3;
  } else if (volume < 5*MAXIMUM_VOLUME/6) {
    return 4;
  } else {
    return 5;
  }
}

void light_up_segment(int segment_number) {
  int segment_start = (NUM_LEDS/6)*segment_number;
  for (int i = segment_start; i < segment_start + NUM_LEDS/6; i++) {
    leds[i] = CHSV(color, 255, 200);
  }
}

int pos = 0;

void worm() {
  if (pos == NUM_LEDS) {
    pos = 0;
  }
  int brightness = map_volume_to_brightness();
  leds[pos] = CHSV(color, 255, brightness);
  fadeToBlackBy(leds, NUM_LEDS, 2);
  pos++;
}
